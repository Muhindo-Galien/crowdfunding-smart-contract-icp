service: () -> {
    contributeToProject: (text, record {amount:nat64; contributor:text}) -> (variant {Ok:record {id:text; status:text; title:text; creator:text; goalAmount:nat64; description:text; deadline:nat64; raisedAmount:nat64; contributors:vec text}; Err:variant {ProjectExpired:text; ProjectNotOpen:text; InvalidPayload:text; NotFound:text; InsufficientFunds:text}});
    createProject: (record {title:text; creator:text; duration:nat64; goalAmount:nat64; description:text}) -> (variant {Ok:record {id:text; status:text; title:text; creator:text; goalAmount:nat64; description:text; deadline:nat64; raisedAmount:nat64; contributors:vec text}; Err:variant {ProjectExpired:text; ProjectNotOpen:text; InvalidPayload:text; NotFound:text; InsufficientFunds:text}});
    getContributors: (text) -> (variant {Ok:vec text; Err:variant {ProjectExpired:text; ProjectNotOpen:text; InvalidPayload:text; NotFound:text; InsufficientFunds:text}}) query;
    getExpiredProjects: () -> (variant {Ok:vec record {id:text; status:text; title:text; creator:text; goalAmount:nat64; description:text; deadline:nat64; raisedAmount:nat64; contributors:vec text}; Err:variant {ProjectExpired:text; ProjectNotOpen:text; InvalidPayload:text; NotFound:text; InsufficientFunds:text}}) query;
    getProject: (text) -> (variant {Ok:record {id:text; status:text; title:text; creator:text; goalAmount:nat64; description:text; deadline:nat64; raisedAmount:nat64; contributors:vec text}; Err:variant {ProjectExpired:text; ProjectNotOpen:text; InvalidPayload:text; NotFound:text; InsufficientFunds:text}}) query;
    getProjects: () -> (variant {Ok:vec record {id:text; status:text; title:text; creator:text; goalAmount:nat64; description:text; deadline:nat64; raisedAmount:nat64; contributors:vec text}; Err:variant {ProjectExpired:text; ProjectNotOpen:text; InvalidPayload:text; NotFound:text; InsufficientFunds:text}}) query;
}
